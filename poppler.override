/* -*- Mode: C; c-basic-offset: 4 -*- */
// vim: ft=c
%%
headers
#include <Python.h>
#include "pygobject.h"
#include <glib/poppler.h>
#include <pygtk/pygtk.h>
#include <pycairo.h>
#include <gdk/gdkregion.h>

extern Pycairo_CAPI_t *Pycairo_CAPI;

static PyObject *
_glist_to_pylist_objs (GList *source)
{
    GList *iter;
    PyObject *dest = PyList_New (0);
    for (iter = source; iter != NULL; iter = iter->next)
    {
        PyObject *item = pygobject_new ((GObject *)iter->data);
        PyList_Append (dest, item);
        Py_DECREF (item);
    }
    return dest;
}

// from pygtk-private.h
 
#ifndef GDK_TYPE_REGION
GType
pygdk_region_get_type (void)
{
  static GType our_type = 0;
 
  if (our_type == 0)
    our_type = g_boxed_type_register_static ("GdkRegion",
                                             (GBoxedCopyFunc)gdk_region_copy,
                                             (GBoxedFreeFunc)gdk_region_destroy);
  return our_type;
}
#endif

#ifdef GDK_TYPE_REGION
    #define PYGDK_TYPE_REGION  GDK_TYPE_REGION 
#else
    GType pygdk_region_get_type (void) G_GNUC_CONST;
    #define PYGDK_TYPE_REGION (pygdk_region_get_type ())
#endif /* GDK_TYPE_REGION */

%%
init

%%
modulename poppler
%%
import gobject.GObject as PyGObject_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
%%
ignore-glob
  *_get_type
  _*
%%
override poppler_document_get_attachments noargs
static PyObject *
_wrap_poppler_document_get_attachments(PyGObject *self) {
    GList           *item_list;
    PyObject        *ret;
    
    item_list = poppler_document_get_attachments(POPPLER_DOCUMENT(self->obj));
    ret = _glist_to_pylist_objs(item_list);
    g_list_free(item_list);
    return ret;
}
%%
override poppler_page_find_text kwargs
static PyObject *
_wrap_poppler_page_find_text(PyGObject *self, PyObject *args, PyObject *kwargs) {
    static char     *kwlist[] = { "text", NULL };
    const gchar     *text;
    GList           *item_list;
    PyObject        *ret;
    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s",
                                     kwlist,
                                     &text)) {
        return NULL;
    }

    item_list = poppler_page_find_text(POPPLER_PAGE(self->obj), text);
    ret = _glist_to_pylist_objs(item_list);
    g_list_free(item_list);
    return ret;
}
%%
override poppler_document_find_dest kwargs
static PyObject *
_wrap_poppler_document_find_dest(PyGObject *self,
                                 PyObject *args,
                                 PyObject *kwargs)
{
    static char *kwlist[] = { "link_name", NULL };
    const gchar *link_name;
    PopplerDest *ret;
    PyObject    *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s", kwlist, &link_name))
        return NULL;

    ret = poppler_document_find_dest(POPPLER_DOCUMENT(self->obj), link_name);

    if (ret) {
        py_ret = pypoppler_dest_new(ret);
        return py_ret;
    } else {
        Py_INCREF(Py_None);
        return Py_None;
    }
}
%%
override poppler_page_get_size noargs
static PyObject *
_wrap_poppler_page_get_size(PyGObject *self)
{
    double      width;
    double      height;

    poppler_page_get_size(POPPLER_PAGE(self->obj), &width, &height);
    
    return Py_BuildValue("dd", width, height);
}
%%
override poppler_page_get_transition noargs
static PyObject *
_wrap_poppler_page_get_transition(PyGObject *self)
{
    PopplerPageTransition   *ret;
    PyObject                *py_ret;
    
    ret = poppler_page_get_transition(POPPLER_PAGE(self->obj));
    
    if (ret) {
        py_ret = pypoppler_page_transition_new(ret);
        return py_ret;
    } else {
        Py_INCREF(Py_None);
        return Py_None;
    }
}
